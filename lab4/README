Завдання 1
Аналіз вихідного коду:
У вихідному коді є базовий клас Animal і його підклас Dog. Базовий клас має два методи: speak() і move(), які не мають реалізації. Підклас Dog не має жодної власної реалізації, але успадковує методи від базового класу.

Проблеми вихідного коду:
Використання спадкування може створювати зайву залежність між класами, особливо якщо їх структура складається з багатьох різних функцій і методів.
У випадку, якщо потрібно змінити реалізацію методів базового класу, це може призвести до неочікуваного зміни поведінки у всіх підкласах.
В даному випадку, підклас Dog навіть не додає жодної додаткової функціональності, він просто успадковує методи базового класу без змін.

Прийняті рішення щодо рефакторингу:
Було прийнято рішення відмовитися від спадкування і замість цього використовувати делегування для виклику методів базового класу.
В класі Dog був створений об'єкт базового класу Animal, і методи базового класу були викликані через цей об'єкт.
Це дозволило знизити залежність між класами і зробити код більш гнучким для змін. Також це робить структуру класів більш зрозумілою, оскільки не виникає зайвого успадкування методів без змін.

Завдання 2
Аналіз вихідного коду: 
У вихідному коді є два класи Square і Circle, які обчислюють площу квадрата і кола відповідно. Обидва класи мають власний метод для обчислення площі (area_square() для Square і area_circle() для Circle).

Проблеми вихідного коду: 
В обох класах використовується різний інтерфейс для обчислення площі. Це може призвести до складнощів у використанні цих класів, коли потрібно використовувати їх у змішаному контексті.
Використання різних методів для обчислення площі ускладнює зміну реалізації цих методів, якщо потрібно змінити формулу для обчислення площі, наприклад.

Прийняті рішення щодо рефакторингу: 
Був створений спільний метод area() для обох класів, який обчислює площу фігури, незалежно від її типу. 
Метод area() приймає параметри необхідні для обчислення площі відповідної фігури (сторона для квадрата і радіус для кола).
Це рішення спрощує використання класів Square і Circle, оскільки вони тепер мають спільний інтерфейс для обчислення площі. Крім того, це зробить їх більш гнучкими у випадку зміни реалізації обчислення площі.
